import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Badge } from '@/components/ui/badge'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { 
  Calendar,
  MapPin,
  Clock,
  Users,
  Plus,
  Sparkles,
  Download,
  Share
} from '@phosphor-icons/react'
import { useKV } from '@github/spark/hooks'

const ItineraryPage = () => {
  const [itineraries, setItineraries] = useKV('travel-itineraries', [])
  const [isGenerating, setIsGenerating] = useState(false)
  const [newItinerary, setNewItinerary] = useState({
    destination: '',
    days: 3,
    interests: '',
    budget: 'medium'
  })

  const generateItinerary = async () => {
    setIsGenerating(true)
    try {
      const prompt = spark.llmPrompt`
        Create a detailed ${newItinerary.days}-day travel itinerary for ${newItinerary.destination}.
        
        Traveler interests: ${newItinerary.interests}
        Budget level: ${newItinerary.budget}
        
        Format the response as a JSON object with this structure:
        {
          "title": "Trip title",
          "overview": "Brief description",
          "days": [
            {
              "day": 1,
              "theme": "Day theme",
              "activities": [
                {
                  "time": "9:00 AM",
                  "activity": "Activity name",
                  "location": "Location name",
                  "description": "Activity description",
                  "estimatedCost": 100,
                  "duration": "2 hours"
                }
              ]
            }
          ],
          "totalEstimatedCost": 1000,
          "tips": ["Tip 1", "Tip 2"]
        }
        
        Include realistic timings, locations, and costs in local currency. Make it detailed and actionable.
      `
      
      const response = await spark.llm(prompt, 'gpt-4o', true)
      const itineraryData = JSON.parse(response)
      
      const newItineraryEntry = {
        id: Date.now(),
        ...itineraryData,
        createdAt: new Date().toISOString(),
        destination: newItinerary.destination,
        requestedDays: newItinerary.days,
        budget: newItinerary.budget
      }
      
      setItineraries(prev => [newItineraryEntry, ...prev])
      
      // Reset form
      setNewItinerary({
        destination: '',
        days: 3,
        interests: '',
        budget: 'medium'
      })
      
    } catch (error) {
      console.error('Error generating itinerary:', error)
      alert('Failed to generate itinerary. Please try again.')
    } finally {
      setIsGenerating(false)
    }
  }

  const deleteItinerary = (id) => {
    setItineraries(prev => prev.filter(item => item.id !== id))
  }

  const exportItinerary = (itinerary) => {
    const content = `
# ${itinerary.title}

**Destination:** ${itinerary.destination}
**Duration:** ${itinerary.days?.length || itinerary.requestedDays} days
**Budget:** ${itinerary.budget}
**Total Estimated Cost:** ₹${itinerary.totalEstimatedCost}

## Overview
${itinerary.overview}

${itinerary.days?.map(day => `
## Day ${day.day} - ${day.theme}

${day.activities.map(activity => `
### ${activity.time} - ${activity.activity}
**Location:** ${activity.location}
**Duration:** ${activity.duration}
**Cost:** ₹${activity.estimatedCost}

${activity.description}
`).join('\n')}
`).join('\n')}

## Travel Tips
${itinerary.tips?.map(tip => `- ${tip}`).join('\n')}

---
Generated by Travel Genie AI
    `
    
    const blob = new Blob([content], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${itinerary.title.replace(/[^a-z0-9]/gi, '_')}_itinerary.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="container mx-auto px-4 py-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold flex items-center gap-3">
            <Calendar size={32} className="text-primary" />
            Travel Itinerary
          </h1>
          <p className="text-muted-foreground">
            Create AI-powered travel plans tailored to your preferences
          </p>
        </div>
        
        <Dialog>
          <DialogTrigger asChild>
            <Button className="bg-gradient-to-r from-primary to-accent">
              <Plus size={16} className="mr-2" />
              Generate New Itinerary
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-md">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <Sparkles size={20} className="text-primary" />
                AI Itinerary Generator
              </DialogTitle>
            </DialogHeader>
            
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium mb-2 block">Destination</label>
                <Input
                  value={newItinerary.destination}
                  onChange={(e) => setNewItinerary(prev => ({ ...prev, destination: e.target.value }))}
                  placeholder="e.g., Paris, Tokyo, New York"
                />
              </div>
              
              <div>
                <label className="text-sm font-medium mb-2 block">Number of Days</label>
                <Select 
                  value={newItinerary.days.toString()} 
                  onValueChange={(value) => setNewItinerary(prev => ({ ...prev, days: parseInt(value) }))}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {[1,2,3,4,5,6,7,10,14].map(days => (
                      <SelectItem key={days} value={days.toString()}>
                        {days} {days === 1 ? 'day' : 'days'}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <label className="text-sm font-medium mb-2 block">Your Interests</label>
                <Textarea
                  value={newItinerary.interests}
                  onChange={(e) => setNewItinerary(prev => ({ ...prev, interests: e.target.value }))}
                  placeholder="e.g., museums, food, nightlife, nature, adventure sports"
                  rows={3}
                />
              </div>
              
              <div>
                <label className="text-sm font-medium mb-2 block">Budget Level</label>
                <Select 
                  value={newItinerary.budget} 
                  onValueChange={(value) => setNewItinerary(prev => ({ ...prev, budget: value }))}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="budget">Budget (₹0 - ₹2000/day)</SelectItem>
                    <SelectItem value="medium">Medium (₹2000 - ₹5000/day)</SelectItem>
                    <SelectItem value="luxury">Luxury (₹5000+/day)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <Button 
                onClick={generateItinerary}
                disabled={!newItinerary.destination || isGenerating}
                className="w-full"
              >
                {isGenerating ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Generating...
                  </>
                ) : (
                  <>
                    <Sparkles size={16} className="mr-2" />
                    Generate Itinerary
                  </>
                )}
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Itineraries List */}
      {itineraries.length === 0 ? (
        <Card>
          <CardContent className="pt-6 text-center">
            <Calendar size={48} className="mx-auto text-muted-foreground mb-4" />
            <h3 className="text-lg font-semibold mb-2">No itineraries yet</h3>
            <p className="text-muted-foreground mb-4">
              Generate your first AI-powered travel itinerary to get started
            </p>
            <Dialog>
              <DialogTrigger asChild>
                <Button>
                  <Plus size={16} className="mr-2" />
                  Create Your First Itinerary
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-md">
                {/* Same dialog content as above */}
              </DialogContent>
            </Dialog>
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-6">
          {itineraries.map((itinerary) => (
            <Card key={itinerary.id} className="overflow-hidden">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div>
                    <CardTitle className="text-xl mb-2">{itinerary.title}</CardTitle>
                    <div className="flex items-center gap-4 text-sm text-muted-foreground">
                      <div className="flex items-center gap-1">
                        <MapPin size={14} />
                        {itinerary.destination}
                      </div>
                      <div className="flex items-center gap-1">
                        <Clock size={14} />
                        {itinerary.days?.length || itinerary.requestedDays} days
                      </div>
                      <div className="flex items-center gap-1">
                        <Users size={14} />
                        {itinerary.budget} budget
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex gap-2">
                    <Button
                      onClick={() => exportItinerary(itinerary)}
                      size="sm"
                      variant="outline"
                    >
                      <Download size={14} className="mr-2" />
                      Export
                    </Button>
                    <Button
                      onClick={() => deleteItinerary(itinerary.id)}
                      size="sm"
                      variant="destructive"
                    >
                      Delete
                    </Button>
                  </div>
                </div>
              </CardHeader>
              
              <CardContent>
                <p className="text-muted-foreground mb-4">{itinerary.overview}</p>
                
                {itinerary.totalEstimatedCost && (
                  <Badge variant="secondary" className="mb-4">
                    Total Cost: ₹{itinerary.totalEstimatedCost}
                  </Badge>
                )}
                
                <div className="space-y-4">
                  {itinerary.days?.map((day) => (
                    <div key={day.day} className="border rounded-lg p-4">
                      <h4 className="font-semibold mb-2">Day {day.day} - {day.theme}</h4>
                      <div className="space-y-2">
                        {day.activities.slice(0, 3).map((activity, idx) => (
                          <div key={idx} className="flex items-center gap-3 text-sm">
                            <Badge variant="outline" className="min-w-16">
                              {activity.time}
                            </Badge>
                            <span>{activity.activity}</span>
                            <span className="text-muted-foreground">- {activity.location}</span>
                          </div>
                        ))}
                        {day.activities.length > 3 && (
                          <p className="text-sm text-muted-foreground">
                            +{day.activities.length - 3} more activities
                          </p>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
                
                {itinerary.tips && itinerary.tips.length > 0 && (
                  <div className="mt-4">
                    <h5 className="font-medium mb-2">Travel Tips:</h5>
                    <ul className="text-sm text-muted-foreground space-y-1">
                      {itinerary.tips.slice(0, 2).map((tip, idx) => (
                        <li key={idx}>• {tip}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  )
}

export default ItineraryPage